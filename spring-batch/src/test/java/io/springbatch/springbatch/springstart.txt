-------스프링 배치-------
Spring batch
배치 핵심패턴
1. Read - database, file , queue 다량의 데이터 조회
2. Process - 특정방법으로 데이터 가공
3. Write - data를 수정된 양식으로 다시 저장
배치 시나리오
1. 배치프로세스 주기적 커밋
2. 동시 다발적인 job의 배치처리. 대용량 병렬처리(여러개의 thread)
3. 실패후 수동 또는 스케줄링에 의한 재시작
4. 의존관계가 있는 step여러개 순차적처리(기본 배치모델)
5. 조건적 flow구성을 통한 체계적으로 유연한 배치 모델 구성
6. 반복, 재시도 ,skip처리(예외에따라 재시도 skip)

- 배치 아키텍처

Application : 스프링배치 프레임워크를 통해 모든 배치 job과 커스텀 코드 포함. 업무로직구현에만 집중. 공통적인 기반기술은 프레임윅이 담당.
Batch core : batch 실행, 모니터링, 관리 api로 구성. JobLanuncher, Job, Step, Flow 등이 속함.
  -> Job 명세서
Batch Infrastructure: application, core 모두 infrastructure위에서 빌드. Job실행의 흐름과 처리를 위한 틀 제공. Reader, Processor writer, Skip, Retry 등이 속함.

- 프로젝트 구성 및 의존성 설정
>> 설정
pom.xml 
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-batch</artifactId>
</dependency>
---oracle 설치
1) docker 설치
-colima start --memory 4 --arch x86_64
-docker ps
-docker run --restart unless-stopped --name oracle -e ORACLE_PASSWORD=pass -p 1521:1521 -d gvenzl/oracle-xe
-docker search oracle-xe-11g
-docker image
-docker run --name my_oracle -d -p 8080:8080 -p 1521:1521 jaspeen/oracle-xe-11g ****
-비밀번호 패스
 docker run -e ORACLE_PASSWORD=pass -p 1521:1521 -d gvenzl/oracle-xe
-로그확인
docker logs -f fervent_williamson //
-docker ps
-docker exec -it oracle sqlplus

-docker 띄우기
 docker start oracle
 docker exec -it oracle sqlplus
 docker ps

/opt/homebrew

SQL> CREATE USER {사용할이름} IDENTIFIED BY {사용할비밀번호};
SQL> GRANT RESOURCE, CONNECT TO {사용할이름};
SQL> grant create session, create table, create procedure to {사용할이름};
SQL> ALTER USER {사용할이름} quota unlimited on USERS;

설정기타----
"java.configuration.runtimes": [
  {
    "name": "JavaSE-1.8",
    "path": "/path/to/jdk-8",
  },
  {
    "name": "JavaSE-11",
    "path": "/path/to/jdk-11",
  },
  {
    "name": "JavaSE-17",
    "path": "/path/to/jdk-17",
    "default": true
  },
]
>brew install openjdk@17
For the system Java wrappers to find this JDK, symlink it with
  sudo ln -sfn /opt/homebrew/opt/openjdk@17/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-17.jdk

openjdk@17 is keg-only, which means it was not symlinked into /opt/homebrew,
because this is an alternate version of another formula.

If you need to have openjdk@17 first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/openjdk@17/bin:$PATH"' >> ~/.zshrc

For compilers to find openjdk@17 you may need to set:
  export CPPFLAGS="-I/opt/homebrew/opt/openjdk@17/include"
>brew install mvn
>brew install openjdk@11
For the system Java wrappers to find this JDK, symlink it with
  sudo ln -sfn /opt/homebrew/opt/openjdk@11/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-11.jdk

openjdk@11 is keg-only, which means it was not symlinked into /opt/homebrew,
because this is an alternate version of another formula.

If you need to have openjdk@11 first in your PATH, run:
  echo 'export PATH="/opt/homebrew/opt/openjdk@11/bin:$PATH"' >> ~/.zshrc

For compilers to find openjdk@11 you may need to set:
  export CPPFLAGS="-I/opt/homebrew/opt/openjdk@11/include"
  
---mysql 설치
  docker run --name mysql-container -e MYSQL_ROOT_PASSWORD=<password> -d -p 3306:3306 mysql:latest

--스프링배치 활성화
@EnableBatchProcessing :스프링배치가 작동하기 위해 선언해야하는 어노테이션
총 4개의 설정 클래스를 실행시키며 스프링 배치의 모든 초기화 및 실행구성이 이루어짐
스프링 부트 배치의 자동설정 클래스가 실행됨으로 빈으로 등록된 모든 Job을 검색해 초기화와 동시에 Job을 수행하도록 구성.

--스프링배치 초기화 설정 클래스
1. BatchAutoConfiguration
  : 스프링 배치가 초기화될대 자동으로 실행되는 설정클래스
  : Job을 수행하는 JobLanucherApplicationRunner빈을 생성
2. SimpleBatchConfiguration
  : JobBuilderFactory 와 StepBuilderFactory생성
  : spring batch 주요구성 요소 생성 - 프록시 객체로 생성됨
3. BatchConfigurerConfiguration
  - BasicBatchConfigurer
    : SimpleBatchConfiguration에서 생성한 프록시 객체의 실제 대상 객체를 생성하는 클래스
    : 빈으로 의존성 주입받아 주요 객체들을 참조해서 사용할수 있다.
    
  - JpaBatchConfigurer
    : JPA 관련 객체를 생성하는 설정클래스

  - 사용자 정의 BatchConfigurer interface를 구현하여 사용할 수 있다.

  @EnableBatchProcessing -> SimpleBatchConfiguration -> BatchConfigurerConfiguration -> BatchAutoConfiguration

2.2 스프링 배치 시작
- @configuration선언
 : 하나의 배치 Job을 정의하고 빈설정
- JobBuilderFactory : Job을 생성하고 빌더 factory 
- StepBuilderFactory : Step을 생성하는 빌더 factory
- Job : helloJob이름으로 생성
- Step : helloStep 이름으로 step 생성
- tasklet :Step 안에서 단일 태스크로 수행하고 로직 구현

2.3 DB스키마생성
 - DB와 연동할 경우 필수적으로 메타 테이블 생성필요.
 - DB스키마 제공
   파일 위치 : /org/springframework/batdh/core/schema-*.sql 
   DB유형별로 제공
 - 자동생성 : spring.batch.jdbc.initialize-schema 설정
    - ALWAYS : 스크립트 항상 실행. RDBMS 설정되어 있는 경우 내장DB보다 우선적 실행
    - EMBEEDDED : 내장DB일 때만 실행. 스키마 자동생성. default 
    - NAVER : 스크립트 항상실행안함. 내장DB일 경우 스크립트 생성이 안되기 때문에 오류발생. 운영세서 수동으로 스크립트 생성후 설정권장.
    https://docs.spring.io/spring-batch/docs/3.0.x/reference/html/metaDataSchema.html 참조

 -job table
  -BATCH_JOB_INSTANCE
  :job 이 실행될때 jobinstance 정보 저장, job_name/job_key로 하나의 데이터 저장
  :동일한 job_name과 job_key 중복 불가
  -BATCH_JOB_EXECUTION
   :job의 실행정보 저장, job 생성, 시작,종료시간 ,실행상태, 메시지 관리
  - BATCH_JOB_EXECUTION_PARAMS
   :job과 실행되는 jobParamter정보 저장
  - BATCH_JOB_EXECUTION_CONTEXT
   : job의 실행동안 여러가지 상태정보, 공유데이터 직렬화(json형식) 저장
   : step간 서로 공유가능
 - step 관련 테이블
   - BATCH_STEP_EXECUTION
     : step의 실행정보 저장, 생성/시작/종료시간/실행상태/메시지 관리
   - BATCH_STEP_EXECUTION_CONTEXT
     : step 실행동안 여러가지 상태정보, 공유데이터 직렬화(json형식) 저장.
     : step별로 저장되며 step간 서로 공유할수 없음.

   * Step
   step class : Batch job을 구성하는 독립적인 하나의 단계, 실제 배치 처리를 정의.
        단순 단일 task 외 입력, 처리 , 출력과 관련된 비지니스 로직 구현
        배치작업을 어떻게 구성하고 실행할 것인지 job의 세부작없을 task기반으로 설정하고 명세해놓은 객체
        모든 job은 하나 이상의 step으로 구성
    기본구현체
      - TaskletStep : 가장 기본이 되는 class. Tasklet타입의 구현체 제어
      - PartitionStep : 멀티 스레드 방식으로 step 을 여러개로 분리해서 실행.
      - JobStep : step내에서 job을 실행하도록 함.
      - FlowStep : step내에서 flow를 실행하도록 한다.
    * StepExecution
     :step에 대한 한번의 시도를 의미하는 객체. step실행중에 발생한 정보저장 객체.
     :매번시도 때마다 생성되어 각 step별로 생성.
     :job이 재시작되어도 이미 성공한 step은 재실행되지 않는다. 옵션에 따라 재실행하게 가능함.
     :이전단계에서 step이 실패해서 현재 step을 실행하지  않았다면 stepExecution을 생성하지 않음.
     step이 실제로 시작되었을때만 stepExecution을 생성.
     : step의 stepExecution이 모두 정상적으로 완료되어야 jobExecution이 생성.
     : 실패시 jobExecuion은 실패임.
    - BATCH_STEP_EXECUTION 테이블과 매핑
      : jobExecution : StepExecution= 1:M 의 관계
      : 하나의 job에 여러개의 step으로 구성한 경우 각 stepExecution은 하나의 jobExecution을 부모로 가짐.
    * StepContriution
    : chunk process 변경사항을 버퍼링한 후 stepExecution 상태를 업데이트하는 도메인 객체.
    : chunk 커밋 직전에 stepExecution의 apply method 를 호출하여 상태 업데이트
    : ExitStatus의 기본 종료코드 외 사용자 정의종료코드를 생성해서 적용할 수 있음.
    : 속성 - readCount,  writeCount ,filterCount, parentSkipCount, readSkipCount, writeSkipCount,
    processSkipCount, ExitStatus, StepExecution
* ExecutionContext
 : framework에서 유지 및 관리하는 키/값을 map으로 stepExecution/jobExecution 객체의 상태를 공유하는 객체
  Map<String,Object> map = new ConcurrentHashMap
  step간 상태 서로 공유하지않음. job의 step간 공유함. job간 상태 서로 공유하지 않음.

* JobRepository
 : 배치 작업 중의 정보를 저장하는 저장소 역할
 jobLauncher, Job, step 구현체 내부에서 CRUD 기능을 처리함.
@EnableBatchProcessing 선언
BatchConfigurer interface 구현, BasicBatchConfigurer 상속해서 jobRepository 설정
 -JDBC 방식 설정 : JobRepositoryFactoryBean
 -In Memory방식 설정 : MapJobRepositoryFactoryBean
  성능등의 이유로 db에 저장하지 않을때, 보통 test나 proptotype 의 빠른 개발이 필요할때.
* JobLauncher
 : 배치 job을 실행시키는 역할. job, jobparamters 인자로 받음.
  별도로 bean 생성을 넣지 않아도 구동시 자동생성함.
  - 동기적 실행
   : taskExecutor를 SyncTaskExecutor 설정한 경우(기본)
    스케줄러에 의한 배치처리에 적합함. 배치처리시간이 길어도 상관없음.
  -비동기적 실행
   : taksExecutor가 SimpleAsyncTaskExecutor로 설정한경우.
     http요청에 의한 배치처리에 적합.-배치처리 시간이 길 경우 응답이 늦어지지않도록 함.
     응답값 ExitStatus.UNKNOWN



